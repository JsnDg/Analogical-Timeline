{"ast":null,"code":"var _jsxFileName = \"/Users/jasonding/Desktop/Pinball/src/components/Pinball.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Pinball() {\n  _s();\n  const canvasRef = useRef(null);\n  // 用 ref 保存弹珠对象（初始为空）\n  const ballRef = useRef(null);\n  // 定义几个障碍物，每个障碍物是一个圆，包含位置、半径和弹性系数\n  const obstaclesRef = useRef([{\n    x: 200,\n    y: 150,\n    radius: 20,\n    elasticity: 1.0\n  }, {\n    x: 400,\n    y: 250,\n    radius: 25,\n    elasticity: 0.9\n  }, {\n    x: 300,\n    y: 400,\n    radius: 30,\n    elasticity: 0.8\n  }]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let lastTime = performance.now();\n    const gravity = 500; // 重力加速度，单位像素/秒²\n\n    // 主更新循环\n    function update(time) {\n      const dt = (time - lastTime) / 1000; // 秒\n      lastTime = time;\n      if (ballRef.current) {\n        let ball = ballRef.current;\n        // 应用重力\n        ball.vy += gravity * dt;\n        // 更新位置\n        ball.x += ball.vx * dt;\n        ball.y += ball.vy * dt;\n\n        // 碰撞检测：与画布边界\n        if (ball.x - ball.radius < 0) {\n          ball.x = ball.radius;\n          ball.vx *= -0.8; // 简单反弹（部分能量损失）\n        }\n        if (ball.x + ball.radius > canvas.width) {\n          ball.x = canvas.width - ball.radius;\n          ball.vx *= -0.8;\n        }\n        if (ball.y - ball.radius < 0) {\n          ball.y = ball.radius;\n          ball.vy *= -0.8;\n        }\n        if (ball.y + ball.radius > canvas.height) {\n          ball.y = canvas.height - ball.radius;\n          ball.vy *= -0.8;\n        }\n\n        // 碰撞检测：与各个障碍物（圆形）\n        obstaclesRef.current.forEach(obstacle => {\n          const dx = ball.x - obstacle.x;\n          const dy = ball.y - obstacle.y;\n          const dist = Math.sqrt(dx * dx + dy * dy);\n          if (dist < ball.radius + obstacle.radius) {\n            // 计算单位法向量\n            const normalX = dx / dist;\n            const normalY = dy / dist;\n            // 计算当前速度在法向量方向的投影\n            const dot = ball.vx * normalX + ball.vy * normalY;\n            // 反射速度（乘以障碍物的弹性系数）\n            ball.vx = ball.vx - 2 * dot * normalX * obstacle.elasticity;\n            ball.vy = ball.vy - 2 * dot * normalY * obstacle.elasticity;\n            // 将球推离障碍物，防止重叠\n            const overlap = ball.radius + obstacle.radius - dist;\n            ball.x += normalX * overlap;\n            ball.y += normalY * overlap;\n          }\n        });\n      }\n      draw();\n      animationFrameId = requestAnimationFrame(update);\n    }\n\n    // 绘制函数\n    function draw() {\n      // 清除画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // 绘制障碍物\n      obstaclesRef.current.forEach(obstacle => {\n        ctx.beginPath();\n        ctx.arc(obstacle.x, obstacle.y, obstacle.radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'orange';\n        ctx.fill();\n        ctx.closePath();\n      });\n      // 绘制弹珠\n      if (ballRef.current) {\n        ctx.beginPath();\n        ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'blue';\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n    animationFrameId = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId);\n  }, []);\n\n  // 点击按钮发射弹珠，从画布底部中间发射，并给予初始向上速度\n  const launchBall = () => {\n    ballRef.current = {\n      x: 300,\n      // 画布宽度600的一半\n      y: 580,\n      // 画布高度600，留出边距\n      radius: 10,\n      vx: 0,\n      // 水平初始速度\n      vy: -400 // 向上初始速度\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 600,\n      style: {\n        border: '1px solid #000',\n        display: 'block',\n        margin: '0 auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: launchBall,\n        children: \"\\u53D1\\u5C04\\u5F39\\u73E0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Pinball, \"flz9nLdXcRjxFnH0eS3A/m8Rpr4=\");\n_c = Pinball;\nexport default Pinball;\nvar _c;\n$RefreshReg$(_c, \"Pinball\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Pinball","_s","canvasRef","ballRef","obstaclesRef","x","y","radius","elasticity","canvas","current","ctx","getContext","animationFrameId","lastTime","performance","now","gravity","update","time","dt","ball","vy","vx","width","height","forEach","obstacle","dx","dy","dist","Math","sqrt","normalX","normalY","dot","overlap","draw","requestAnimationFrame","clearRect","beginPath","arc","PI","fillStyle","fill","closePath","cancelAnimationFrame","launchBall","children","ref","style","border","display","margin","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/jasonding/Desktop/Pinball/src/components/Pinball.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nfunction Pinball() {\n  const canvasRef = useRef(null);\n  // 用 ref 保存弹珠对象（初始为空）\n  const ballRef = useRef(null);\n  // 定义几个障碍物，每个障碍物是一个圆，包含位置、半径和弹性系数\n  const obstaclesRef = useRef([\n    { x: 200, y: 150, radius: 20, elasticity: 1.0 },\n    { x: 400, y: 250, radius: 25, elasticity: 0.9 },\n    { x: 300, y: 400, radius: 30, elasticity: 0.8 },\n  ]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let lastTime = performance.now();\n    const gravity = 500; // 重力加速度，单位像素/秒²\n\n    // 主更新循环\n    function update(time) {\n      const dt = (time - lastTime) / 1000; // 秒\n      lastTime = time;\n      if (ballRef.current) {\n        let ball = ballRef.current;\n        // 应用重力\n        ball.vy += gravity * dt;\n        // 更新位置\n        ball.x += ball.vx * dt;\n        ball.y += ball.vy * dt;\n\n        // 碰撞检测：与画布边界\n        if (ball.x - ball.radius < 0) {\n          ball.x = ball.radius;\n          ball.vx *= -0.8; // 简单反弹（部分能量损失）\n        }\n        if (ball.x + ball.radius > canvas.width) {\n          ball.x = canvas.width - ball.radius;\n          ball.vx *= -0.8;\n        }\n        if (ball.y - ball.radius < 0) {\n          ball.y = ball.radius;\n          ball.vy *= -0.8;\n        }\n        if (ball.y + ball.radius > canvas.height) {\n          ball.y = canvas.height - ball.radius;\n          ball.vy *= -0.8;\n        }\n\n        // 碰撞检测：与各个障碍物（圆形）\n        obstaclesRef.current.forEach(obstacle => {\n          const dx = ball.x - obstacle.x;\n          const dy = ball.y - obstacle.y;\n          const dist = Math.sqrt(dx * dx + dy * dy);\n          if (dist < ball.radius + obstacle.radius) {\n            // 计算单位法向量\n            const normalX = dx / dist;\n            const normalY = dy / dist;\n            // 计算当前速度在法向量方向的投影\n            const dot = ball.vx * normalX + ball.vy * normalY;\n            // 反射速度（乘以障碍物的弹性系数）\n            ball.vx = ball.vx - 2 * dot * normalX * obstacle.elasticity;\n            ball.vy = ball.vy - 2 * dot * normalY * obstacle.elasticity;\n            // 将球推离障碍物，防止重叠\n            const overlap = ball.radius + obstacle.radius - dist;\n            ball.x += normalX * overlap;\n            ball.y += normalY * overlap;\n          }\n        });\n      }\n\n      draw();\n      animationFrameId = requestAnimationFrame(update);\n    }\n\n    // 绘制函数\n    function draw() {\n      // 清除画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      // 绘制障碍物\n      obstaclesRef.current.forEach(obstacle => {\n        ctx.beginPath();\n        ctx.arc(obstacle.x, obstacle.y, obstacle.radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'orange';\n        ctx.fill();\n        ctx.closePath();\n      });\n      // 绘制弹珠\n      if (ballRef.current) {\n        ctx.beginPath();\n        ctx.arc(ballRef.current.x, ballRef.current.y, ballRef.current.radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'blue';\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n\n    animationFrameId = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId);\n  }, []);\n\n  // 点击按钮发射弹珠，从画布底部中间发射，并给予初始向上速度\n  const launchBall = () => {\n    ballRef.current = {\n      x: 300,       // 画布宽度600的一半\n      y: 580,       // 画布高度600，留出边距\n      radius: 10,\n      vx: 0,        // 水平初始速度\n      vy: -400,     // 向上初始速度\n    };\n  };\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={600}\n        style={{ border: '1px solid #000', display: 'block', margin: '0 auto' }}\n      />\n      <div style={{ textAlign: 'center', marginTop: '10px' }}>\n        <button onClick={launchBall}>发射弹珠</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Pinball;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}