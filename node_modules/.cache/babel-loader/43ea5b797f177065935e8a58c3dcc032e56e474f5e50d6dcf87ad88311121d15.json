{"ast":null,"code":"var _jsxFileName = \"/Users/jasonding/Desktop/Robot2025/src/components/Showcase.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n\n/**\n * 单个事件节点组件\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventItem({\n  event,\n  eventId,\n  registerPosition\n}) {\n  _s();\n  const itemRef = useRef(null);\n  const [hover, setHover] = useState(false);\n\n  // 悬浮提示（Hover Tooltip）的样式\n  const tooltipStyle = {\n    position: 'absolute',\n    top: '-60px',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    padding: '8px 12px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    whiteSpace: 'nowrap',\n    zIndex: 10,\n    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n    minWidth: '220px'\n  };\n  useEffect(() => {\n    if (itemRef.current) {\n      const rect = itemRef.current.getBoundingClientRect();\n      // 圆点的垂直中心位置\n      const pos = {\n        x: rect.left,\n        y: rect.top + rect.height / 2\n      };\n      registerPosition(eventId, pos);\n    }\n  }, [itemRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: itemRef,\n    style: {\n      position: 'relative',\n      marginBottom: '20px',\n      cursor: 'pointer'\n    },\n    onMouseEnter: () => setHover(true),\n    onMouseLeave: () => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '0',\n        width: '16px',\n        height: '16px',\n        borderRadius: '50%',\n        backgroundColor: '#007BFF'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '24px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '2px solid #ddd',\n          borderRadius: '20px',\n          padding: '8px 14px',\n          background: '#fff',\n          fontSize: '15px',\n          minWidth: '120px',\n          textAlign: 'center',\n          marginBottom: '4px'\n        },\n        children: event.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '14px',\n          color: '#333',\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), hover && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: tooltipStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        style: {\n          display: 'block',\n          marginBottom: '6px'\n        },\n        children: event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '13px',\n          color: '#333'\n        },\n        children: event.detail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * 单条浪潮的时间线组件\n * 根据时间跨度动态计算高度，并对相邻日期进行错位处理\n * 最后将高度限制在 maxHeight 之内，并允许内部滚动\n */\n_s(EventItem, \"kL2Rb512LwiHvVknp2aD3k4I+f0=\");\n_c = EventItem;\nfunction Timeline({\n  wave,\n  waveIndex,\n  registerPosition,\n  maxHeight = 600\n}) {\n  // 1) 获取该浪潮事件的时间戳\n  const timestamps = wave.events.map(e => new Date(e.date).getTime());\n  const earliestTime = Math.min(...timestamps);\n  const latestTime = Math.max(...timestamps);\n  const totalTimeSpan = Math.max(latestTime - earliestTime, 1); // 避免除0\n\n  // 2) 动态计算高度（每天10px），并设置最小高度\n  const days = totalTimeSpan / (1000 * 60 * 60 * 24);\n  let timelineHeight = days * 10;\n  if (timelineHeight < 400) {\n    timelineHeight = 400; // 最小高度\n  }\n\n  // 3) 再设定一个最大高度，避免超过一屏\n  if (timelineHeight > maxHeight) {\n    timelineHeight = maxHeight;\n  }\n\n  // 4) 计算事件的基础位置（pos），再进行相邻错位处理\n  const basePositions = wave.events.map(e => {\n    const currentTime = new Date(e.date).getTime();\n    const ratio = (currentTime - earliestTime) / totalTimeSpan; // 0 ~ 1\n    return ratio * timelineHeight;\n  });\n  const finalPositions = [...basePositions];\n  const minGap = 40; // 相邻事件至少保持40px间距\n  for (let i = 1; i < finalPositions.length; i++) {\n    if (finalPositions[i] - finalPositions[i - 1] < minGap) {\n      finalPositions[i] = finalPositions[i - 1] + minGap;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: '1',\n      margin: '0 20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: '16px',\n        marginBottom: '5px',\n        textAlign: 'center'\n      },\n      children: wave.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '14px',\n        color: '#666',\n        marginBottom: '20px',\n        textAlign: 'center'\n      },\n      children: wave.period\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '2px',\n        backgroundColor: '#bbb',\n        height: timelineHeight + 'px',\n        // 允许内部滚动\n        maxHeight: maxHeight + 'px',\n        overflowY: 'auto',\n        marginLeft: '0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: '-10px',\n          right: '-10px'\n        },\n        children: wave.events.map((event, index) => {\n          const eventId = `${waveIndex}-${index}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              top: finalPositions[index] + 'px',\n              width: '220px'\n            },\n            children: /*#__PURE__*/_jsxDEV(EventItem, {\n              event: event,\n              eventId: eventId,\n              registerPosition: registerPosition\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * 用于绘制跨浪潮事件连线的组件（使用 SVG）\n */\n_c2 = Timeline;\nfunction ConnectionsLayer({\n  connections,\n  eventPositions\n}) {\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none',\n      width: '100%',\n      height: '100%'\n    },\n    children: connections.map((conn, index) => {\n      const fromPos = eventPositions[conn.from];\n      const toPos = eventPositions[conn.to];\n      if (!fromPos || !toPos) return null;\n\n      // 计算连线中点，用于放置文本\n      const midX = (fromPos.x + toPos.x) / 2;\n      const midY = (fromPos.y + toPos.y) / 2;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: fromPos.x,\n          y1: fromPos.y,\n          x2: toPos.x,\n          y2: toPos.y,\n          stroke: \"#f00\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: midX,\n          y: midY - 5,\n          fill: \"#f00\",\n          fontSize: \"12\",\n          textAnchor: \"middle\",\n          children: conn.reason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * 主容器组件：包含多个浪潮的时间线 + 跨浪潮连线\n */\n_c3 = ConnectionsLayer;\nfunction Showcase() {\n  _s2();\n  // 示例数据\n  const waves = [{\n    title: '个人电脑',\n    period: '(1979-1983)',\n    events: [{\n      date: '1979-08-12',\n      title: 'VisiCalc 发布',\n      detail: '首款电子表格软件。'\n    }, {\n      date: '1980-08-25',\n      title: 'IBM PC 立项',\n      detail: '启动“Project Chess”。'\n    }, {\n      date: '1981-08-12',\n      title: 'IBM PC 发布',\n      detail: 'IBM 5150 机型问世。'\n    }, {\n      date: '1982-02-16',\n      title: 'Compaq 创立',\n      detail: '专注生产兼容机。'\n    }, {\n      date: '1983-05-30',\n      title: 'Apple Lisa',\n      detail: 'GUI 的早期尝试。'\n    }]\n  }, {\n    title: '互联网',\n    period: '(1994-2000)',\n    events: [{\n      date: '1994-04-04',\n      title: 'Netscape 创立',\n      detail: 'Mosaic 团队成员成立。'\n    }, {\n      date: '1995-07-05',\n      title: 'Amazon 上线',\n      detail: '杰夫·贝索斯创立。'\n    }, {\n      date: '1996-07-04',\n      title: 'Hotmail 推出',\n      detail: '免费网络邮件服务。'\n    }, {\n      date: '1997-03-02',\n      title: 'AOL 收购 CompuServe',\n      detail: '1.2亿美元收购。'\n    }, {\n      date: '1999-01-15',\n      title: 'Google 搜索',\n      detail: '革新信息检索方式。'\n    }, {\n      date: '2000-06-26',\n      title: 'Dot-com 泡沫顶峰',\n      detail: '大量公司上市。'\n    }]\n  }, {\n    title: '智能手机',\n    period: '(2007-2012)',\n    events: [{\n      date: '2007-01-09',\n      title: 'iPhone 发布',\n      detail: '首次亮相 Macworld。'\n    }, {\n      date: '2007-06-29',\n      title: 'iPhone 开售',\n      detail: '消费者排队抢购。'\n    }, {\n      date: '2008-09-23',\n      title: 'Android 1.0',\n      detail: 'HTC Dream 上市。'\n    }, {\n      date: '2009-03-17',\n      title: 'iPhone OS 3.0',\n      detail: '新增推送通知等功能。'\n    }, {\n      date: '2010-10-04',\n      title: 'Samsung Galaxy S',\n      detail: '安卓阵营崛起。'\n    }, {\n      date: '2012-09-05',\n      title: 'iPhone 5',\n      detail: '更大屏幕、更快处理器。'\n    }]\n  }, {\n    title: '电动车',\n    period: '(2015-2020)',\n    events: [{\n      date: '2015-01-12',\n      title: 'Chevrolet Bolt 概念车',\n      detail: '平价长续航。'\n    }, {\n      date: '2016-03-31',\n      title: 'Tesla Model 3 亮相',\n      detail: '大量预订。'\n    }, {\n      date: '2017-07-28',\n      title: 'Model 3 首批交付',\n      detail: '30位用户交付。'\n    }, {\n      date: '2018-09-25',\n      title: 'NIO ES8',\n      detail: '高端电动 SUV。'\n    }, {\n      date: '2020-01-15',\n      title: 'Tesla Model Y',\n      detail: '进一步拓展市场。'\n    }]\n  }, {\n    title: '生成式 AI',\n    period: '(2019-2023)',\n    events: [{\n      date: '2019-02-14',\n      title: 'OpenAI GPT-2 公布',\n      detail: '受限发布。'\n    }, {\n      date: '2020-05-28',\n      title: 'GPT-3 论文发表',\n      detail: 'Few-Shot Learners。'\n    }, {\n      date: '2021-08-10',\n      title: 'DALL·E 展示',\n      detail: 'AI 生成图像能力。'\n    }, {\n      date: '2022-03-15',\n      title: 'GPT-3.5 发布',\n      detail: 'text-davinci-002。'\n    }, {\n      date: '2022-11-30',\n      title: 'ChatGPT 上线',\n      detail: '用户量激增。'\n    }, {\n      date: '2023-06-12',\n      title: '生成式 AI 爆发',\n      detail: '加速产业变革。'\n    }]\n  }];\n\n  // 存储事件的位置信息（跨浪潮连线需要用到）\n  const [eventPositions, setEventPositions] = useState({});\n\n  // 注册事件位置的回调\n  const registerPosition = (id, pos) => {\n    setEventPositions(prev => ({\n      ...prev,\n      [id]: pos\n    }));\n  };\n\n  // 定义一些跨浪潮连线\n  const connections = [\n  // 个人电脑 -> 互联网\n  {\n    from: '0-2',\n    to: '1-0',\n    reason: '推动网络化办公'\n  },\n  // 互联网 -> 智能手机\n  {\n    from: '1-5',\n    to: '2-5',\n    reason: '信息获取方式转变'\n  },\n  // 智能手机 -> 电动车\n  {\n    from: '2-4',\n    to: '3-4',\n    reason: '智能化互联'\n  },\n  // 互联网 -> 生成式 AI\n  {\n    from: '1-4',\n    to: '4-0',\n    reason: '大数据启发'\n  },\n  // 智能手机 -> 生成式 AI\n  {\n    from: '2-5',\n    to: '4-5',\n    reason: '移动端需求激增'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"\\u79D1\\u6280\\u6D6A\\u6F6E\\u65F6\\u95F4\\u7EBF\\u5C55\\u793A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        flexWrap: 'wrap',\n        marginTop: '40px'\n      },\n      children: waves.map((wave, index) => /*#__PURE__*/_jsxDEV(Timeline, {\n        wave: wave,\n        waveIndex: index,\n        registerPosition: registerPosition,\n        maxHeight: 600 // 你也可以改成 700、500 或者 '80vh' 等\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConnectionsLayer, {\n      connections: connections,\n      eventPositions: eventPositions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n}\n_s2(Showcase, \"/TIA5po90ycbaXnZNqn9kh9Emco=\");\n_c4 = Showcase;\nexport default Showcase;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"EventItem\");\n$RefreshReg$(_c2, \"Timeline\");\n$RefreshReg$(_c3, \"ConnectionsLayer\");\n$RefreshReg$(_c4, \"Showcase\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","EventItem","event","eventId","registerPosition","_s","itemRef","hover","setHover","tooltipStyle","position","top","left","transform","padding","backgroundColor","border","borderRadius","whiteSpace","zIndex","boxShadow","minWidth","current","rect","getBoundingClientRect","pos","x","y","height","ref","style","marginBottom","cursor","onMouseEnter","onMouseLeave","children","width","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","background","fontSize","textAlign","date","color","title","display","detail","_c","Timeline","wave","waveIndex","maxHeight","timestamps","events","map","e","Date","getTime","earliestTime","Math","min","latestTime","max","totalTimeSpan","days","timelineHeight","basePositions","currentTime","ratio","finalPositions","minGap","i","length","flex","margin","period","overflowY","right","index","_c2","ConnectionsLayer","connections","eventPositions","pointerEvents","conn","fromPos","from","toPos","to","midX","midY","x1","y1","x2","y2","stroke","strokeWidth","fill","textAnchor","reason","_c3","Showcase","_s2","waves","setEventPositions","id","prev","justifyContent","flexWrap","marginTop","_c4","$RefreshReg$"],"sources":["/Users/jasonding/Desktop/Robot2025/src/components/Showcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n/**\n * 单个事件节点组件\n */\nfunction EventItem({ event, eventId, registerPosition }) {\n  const itemRef = useRef(null);\n  const [hover, setHover] = useState(false);\n\n  // 悬浮提示（Hover Tooltip）的样式\n  const tooltipStyle = {\n    position: 'absolute',\n    top: '-60px',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    padding: '8px 12px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    whiteSpace: 'nowrap',\n    zIndex: 10,\n    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n    minWidth: '220px',\n  };\n\n  useEffect(() => {\n    if (itemRef.current) {\n      const rect = itemRef.current.getBoundingClientRect();\n      // 圆点的垂直中心位置\n      const pos = { x: rect.left, y: rect.top + rect.height / 2 };\n      registerPosition(eventId, pos);\n    }\n  }, [itemRef.current]);\n\n  return (\n    <div\n      ref={itemRef}\n      style={{\n        position: 'relative',\n        marginBottom: '20px',\n        cursor: 'pointer',\n      }}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n    >\n      {/* 时间线左侧的蓝色圆点 */}\n      <div\n        style={{\n          position: 'absolute',\n          top: '0',\n          width: '16px',\n          height: '16px',\n          borderRadius: '50%',\n          backgroundColor: '#007BFF',\n        }}\n      />\n      {/* 日期与标题 */}\n      <div style={{ marginLeft: '24px' }}>\n        <div\n          style={{\n            border: '2px solid #ddd',\n            borderRadius: '20px',\n            padding: '8px 14px',\n            background: '#fff',\n            fontSize: '15px',\n            minWidth: '120px',\n            textAlign: 'center',\n            marginBottom: '4px',\n          }}\n        >\n          {event.date}\n        </div>\n        <div style={{ fontSize: '14px', color: '#333', textAlign: 'center' }}>\n          <strong>{event.title}</strong>\n        </div>\n      </div>\n\n      {/* 悬浮时显示的详细信息 */}\n      {hover && (\n        <div style={tooltipStyle}>\n          <strong style={{ display: 'block', marginBottom: '6px' }}>\n            {event.title}\n          </strong>\n          <div style={{ fontSize: '13px', color: '#333' }}>{event.detail}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * 单条浪潮的时间线组件\n * 根据时间跨度动态计算高度，并对相邻日期进行错位处理\n * 最后将高度限制在 maxHeight 之内，并允许内部滚动\n */\nfunction Timeline({ wave, waveIndex, registerPosition, maxHeight = 600 }) {\n  // 1) 获取该浪潮事件的时间戳\n  const timestamps = wave.events.map(e => new Date(e.date).getTime());\n  const earliestTime = Math.min(...timestamps);\n  const latestTime = Math.max(...timestamps);\n  const totalTimeSpan = Math.max(latestTime - earliestTime, 1); // 避免除0\n\n  // 2) 动态计算高度（每天10px），并设置最小高度\n  const days = totalTimeSpan / (1000 * 60 * 60 * 24);\n  let timelineHeight = days * 10;\n  if (timelineHeight < 400) {\n    timelineHeight = 400; // 最小高度\n  }\n\n  // 3) 再设定一个最大高度，避免超过一屏\n  if (timelineHeight > maxHeight) {\n    timelineHeight = maxHeight;\n  }\n\n  // 4) 计算事件的基础位置（pos），再进行相邻错位处理\n  const basePositions = wave.events.map(e => {\n    const currentTime = new Date(e.date).getTime();\n    const ratio = (currentTime - earliestTime) / totalTimeSpan; // 0 ~ 1\n    return ratio * timelineHeight;\n  });\n\n  const finalPositions = [...basePositions];\n  const minGap = 40; // 相邻事件至少保持40px间距\n  for (let i = 1; i < finalPositions.length; i++) {\n    if (finalPositions[i] - finalPositions[i - 1] < minGap) {\n      finalPositions[i] = finalPositions[i - 1] + minGap;\n    }\n  }\n\n  return (\n    <div style={{ flex: '1', margin: '0 20px', position: 'relative' }}>\n      <h2 style={{ fontSize: '16px', marginBottom: '5px', textAlign: 'center' }}>\n        {wave.title}\n      </h2>\n      <div style={{ fontSize: '14px', color: '#666', marginBottom: '20px', textAlign: 'center' }}>\n        {wave.period}\n      </div>\n\n      {/* 外层容器：限制最高高度、内部滚动 */}\n      <div\n        style={{\n          position: 'relative',\n          width: '2px',\n          backgroundColor: '#bbb',\n          height: timelineHeight + 'px',\n          // 允许内部滚动\n          maxHeight: maxHeight + 'px',\n          overflowY: 'auto',\n          marginLeft: '0',\n        }}\n      >\n        <div style={{ position: 'absolute', top: 0, left: '-10px', right: '-10px' }}>\n          {wave.events.map((event, index) => {\n            const eventId = `${waveIndex}-${index}`;\n            return (\n              <div\n                key={index}\n                style={{\n                  position: 'absolute',\n                  top: finalPositions[index] + 'px',\n                  width: '220px',\n                }}\n              >\n                <EventItem\n                  event={event}\n                  eventId={eventId}\n                  registerPosition={registerPosition}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * 用于绘制跨浪潮事件连线的组件（使用 SVG）\n */\nfunction ConnectionsLayer({ connections, eventPositions }) {\n  return (\n    <svg\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none',\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      {connections.map((conn, index) => {\n        const fromPos = eventPositions[conn.from];\n        const toPos = eventPositions[conn.to];\n        if (!fromPos || !toPos) return null;\n\n        // 计算连线中点，用于放置文本\n        const midX = (fromPos.x + toPos.x) / 2;\n        const midY = (fromPos.y + toPos.y) / 2;\n\n        return (\n          <g key={index}>\n            <line\n              x1={fromPos.x}\n              y1={fromPos.y}\n              x2={toPos.x}\n              y2={toPos.y}\n              stroke=\"#f00\"\n              strokeWidth=\"2\"\n            />\n            <text\n              x={midX}\n              y={midY - 5}\n              fill=\"#f00\"\n              fontSize=\"12\"\n              textAnchor=\"middle\"\n            >\n              {conn.reason}\n            </text>\n          </g>\n        );\n      })}\n    </svg>\n  );\n}\n\n/**\n * 主容器组件：包含多个浪潮的时间线 + 跨浪潮连线\n */\nfunction Showcase() {\n  // 示例数据\n  const waves = [\n    {\n      title: '个人电脑',\n      period: '(1979-1983)',\n      events: [\n        { date: '1979-08-12', title: 'VisiCalc 发布', detail: '首款电子表格软件。' },\n        { date: '1980-08-25', title: 'IBM PC 立项', detail: '启动“Project Chess”。' },\n        { date: '1981-08-12', title: 'IBM PC 发布', detail: 'IBM 5150 机型问世。' },\n        { date: '1982-02-16', title: 'Compaq 创立', detail: '专注生产兼容机。' },\n        { date: '1983-05-30', title: 'Apple Lisa', detail: 'GUI 的早期尝试。' },\n      ],\n    },\n    {\n      title: '互联网',\n      period: '(1994-2000)',\n      events: [\n        { date: '1994-04-04', title: 'Netscape 创立', detail: 'Mosaic 团队成员成立。' },\n        { date: '1995-07-05', title: 'Amazon 上线', detail: '杰夫·贝索斯创立。' },\n        { date: '1996-07-04', title: 'Hotmail 推出', detail: '免费网络邮件服务。' },\n        { date: '1997-03-02', title: 'AOL 收购 CompuServe', detail: '1.2亿美元收购。' },\n        { date: '1999-01-15', title: 'Google 搜索', detail: '革新信息检索方式。' },\n        { date: '2000-06-26', title: 'Dot-com 泡沫顶峰', detail: '大量公司上市。' },\n      ],\n    },\n    {\n      title: '智能手机',\n      period: '(2007-2012)',\n      events: [\n        { date: '2007-01-09', title: 'iPhone 发布', detail: '首次亮相 Macworld。' },\n        { date: '2007-06-29', title: 'iPhone 开售', detail: '消费者排队抢购。' },\n        { date: '2008-09-23', title: 'Android 1.0', detail: 'HTC Dream 上市。' },\n        { date: '2009-03-17', title: 'iPhone OS 3.0', detail: '新增推送通知等功能。' },\n        { date: '2010-10-04', title: 'Samsung Galaxy S', detail: '安卓阵营崛起。' },\n        { date: '2012-09-05', title: 'iPhone 5', detail: '更大屏幕、更快处理器。' },\n      ],\n    },\n    {\n      title: '电动车',\n      period: '(2015-2020)',\n      events: [\n        { date: '2015-01-12', title: 'Chevrolet Bolt 概念车', detail: '平价长续航。' },\n        { date: '2016-03-31', title: 'Tesla Model 3 亮相', detail: '大量预订。' },\n        { date: '2017-07-28', title: 'Model 3 首批交付', detail: '30位用户交付。' },\n        { date: '2018-09-25', title: 'NIO ES8', detail: '高端电动 SUV。' },\n        { date: '2020-01-15', title: 'Tesla Model Y', detail: '进一步拓展市场。' },\n      ],\n    },\n    {\n      title: '生成式 AI',\n      period: '(2019-2023)',\n      events: [\n        { date: '2019-02-14', title: 'OpenAI GPT-2 公布', detail: '受限发布。' },\n        { date: '2020-05-28', title: 'GPT-3 论文发表', detail: 'Few-Shot Learners。' },\n        { date: '2021-08-10', title: 'DALL·E 展示', detail: 'AI 生成图像能力。' },\n        { date: '2022-03-15', title: 'GPT-3.5 发布', detail: 'text-davinci-002。' },\n        { date: '2022-11-30', title: 'ChatGPT 上线', detail: '用户量激增。' },\n        { date: '2023-06-12', title: '生成式 AI 爆发', detail: '加速产业变革。' },\n      ],\n    },\n  ];\n\n  // 存储事件的位置信息（跨浪潮连线需要用到）\n  const [eventPositions, setEventPositions] = useState({});\n\n  // 注册事件位置的回调\n  const registerPosition = (id, pos) => {\n    setEventPositions(prev => ({ ...prev, [id]: pos }));\n  };\n\n  // 定义一些跨浪潮连线\n  const connections = [\n    // 个人电脑 -> 互联网\n    { from: '0-2', to: '1-0', reason: '推动网络化办公' },\n    // 互联网 -> 智能手机\n    { from: '1-5', to: '2-5', reason: '信息获取方式转变' },\n    // 智能手机 -> 电动车\n    { from: '2-4', to: '3-4', reason: '智能化互联' },\n    // 互联网 -> 生成式 AI\n    { from: '1-4', to: '4-0', reason: '大数据启发' },\n    // 智能手机 -> 生成式 AI\n    { from: '2-5', to: '4-5', reason: '移动端需求激增' },\n  ];\n\n  return (\n    <div style={{ padding: '20px', position: 'relative' }}>\n      <h1 style={{ textAlign: 'center' }}>科技浪潮时间线展示</h1>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          marginTop: '40px',\n        }}\n      >\n        {waves.map((wave, index) => (\n          <Timeline\n            key={index}\n            wave={wave}\n            waveIndex={index}\n            registerPosition={registerPosition}\n            maxHeight={600} // 你也可以改成 700、500 或者 '80vh' 等\n          />\n        ))}\n      </div>\n\n      {/* 在最上层使用 SVG 绘制跨浪潮事件连线 */}\n      <ConnectionsLayer connections={connections} eventPositions={eventPositions} />\n    </div>\n  );\n}\n\nexport default Showcase;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}