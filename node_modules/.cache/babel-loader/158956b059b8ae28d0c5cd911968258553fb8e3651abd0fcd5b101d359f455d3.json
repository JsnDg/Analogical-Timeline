{"ast":null,"code":"var _jsxFileName = \"/Users/jasonding/Desktop/Robot2025/src/components/Showcase.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n\n/**\n * 单个事件节点组件\n * 添加了 ref 用于获取 DOM 节点的位置信息，同时新增 onClick 事件用于手动连接事件\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventItem({\n  event,\n  eventId,\n  registerPosition,\n  onEventClick\n}) {\n  _s();\n  const itemRef = useRef(null);\n  const [hover, setHover] = useState(false);\n\n  // 悬浮提示（Hover Tooltip）的样式\n  const tooltipStyle = {\n    position: 'absolute',\n    top: '-60px',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    padding: '8px 12px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    whiteSpace: 'nowrap',\n    zIndex: 10,\n    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n    minWidth: '220px'\n  };\n  useEffect(() => {\n    if (itemRef.current) {\n      const rect = itemRef.current.getBoundingClientRect();\n      // 假设圆点在节点左侧，取圆点中心位置\n      const pos = {\n        x: rect.left,\n        y: rect.top + rect.height / 2\n      };\n      registerPosition(eventId, pos);\n    }\n  }, [itemRef.current, registerPosition, eventId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: itemRef,\n    style: {\n      position: 'relative',\n      marginBottom: '20px',\n      cursor: 'pointer'\n    },\n    onMouseEnter: () => setHover(true),\n    onMouseLeave: () => setHover(false),\n    onClick: () => onEventClick && onEventClick(eventId),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '0',\n        width: '16px',\n        height: '16px',\n        borderRadius: '50%',\n        backgroundColor: '#007BFF'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '24px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '2px solid #ddd',\n          borderRadius: '20px',\n          padding: '8px 14px',\n          background: '#fff',\n          fontSize: '15px',\n          minWidth: '120px',\n          textAlign: 'center',\n          marginBottom: '4px'\n        },\n        children: event.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '14px',\n          color: '#333',\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), hover && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: tooltipStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        style: {\n          display: 'block',\n          marginBottom: '6px'\n        },\n        children: event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '13px',\n          color: '#333'\n        },\n        children: event.detail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * 单条浪潮的时间线组件\n * 添加 eventId 用于区分各个事件，同时传入 onEventClick 处理手动连接事件\n */\n_s(EventItem, \"kL2Rb512LwiHvVknp2aD3k4I+f0=\");\n_c = EventItem;\nfunction Timeline({\n  wave,\n  waveIndex,\n  registerPosition,\n  onEventClick\n}) {\n  // 延长时间线20%：之前为480，现在变为480*1.2 = 576\n  const timelineHeight = 576;\n  const timestamps = wave.events.map(e => new Date(e.date).getTime());\n  const earliestTime = Math.min(...timestamps);\n  const latestTime = Math.max(...timestamps);\n  const totalTimeSpan = latestTime - earliestTime;\n  const safeTimeSpan = totalTimeSpan === 0 ? 1 : totalTimeSpan;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: '1',\n      margin: '0 20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: '16px',\n        marginBottom: '5px',\n        textAlign: 'center'\n      },\n      children: wave.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '14px',\n        color: '#666',\n        marginBottom: '20px',\n        textAlign: 'center'\n      },\n      children: wave.period\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '2px',\n        backgroundColor: '#bbb',\n        height: timelineHeight + 'px',\n        marginLeft: '0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '0',\n          left: '-10px',\n          right: '-10px'\n        },\n        children: wave.events.map((event, index) => {\n          const currentTime = new Date(event.date).getTime();\n          const offset = currentTime - earliestTime;\n          const ratio = offset / safeTimeSpan;\n          const pos = ratio * timelineHeight;\n          const eventId = `${waveIndex}-${index}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              position: 'absolute',\n              top: pos + 'px',\n              width: '220px'\n            },\n            children: /*#__PURE__*/_jsxDEV(EventItem, {\n              event: event,\n              eventId: eventId,\n              registerPosition: registerPosition,\n              onEventClick: onEventClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * 用于绘制连接线的组件，使用 SVG 实现\n */\n_c2 = Timeline;\nfunction ConnectionsLayer({\n  connections,\n  eventPositions\n}) {\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none',\n      width: '100%',\n      height: '100%'\n    },\n    children: connections.map((conn, index) => {\n      const fromPos = eventPositions[conn.from];\n      const toPos = eventPositions[conn.to];\n      if (!fromPos || !toPos) return null;\n      const midX = (fromPos.x + toPos.x) / 2;\n      const midY = (fromPos.y + toPos.y) / 2;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: fromPos.x,\n          y1: fromPos.y,\n          x2: toPos.x,\n          y2: toPos.y,\n          stroke: \"#f00\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: midX,\n          y: midY - 5,\n          fill: \"#f00\",\n          fontSize: \"12\",\n          textAnchor: \"middle\",\n          children: conn.reason\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n * 主容器组件：包含多个浪潮的时间线和连接线\n * 增加了手动连接功能：用户点击两个事件后会弹窗输入连接理由，然后添加连接\n */\n_c3 = ConnectionsLayer;\nfunction Showcase() {\n  _s2();\n  // 扩展后的示例数据：每个浪潮中增加了更多的事件\n  const waves = [{\n    title: '个人电脑',\n    period: '(1979-1983)',\n    events: [{\n      date: '1979-08-12',\n      title: 'VisiCalc 发布',\n      detail: '首款电子表格软件 VisiCalc 面向 Apple II 推出。'\n    }, {\n      date: '1980-08-25',\n      title: 'IBM PC 立项',\n      detail: 'IBM 决定组建个人电脑部门，启动“Project Chess”。'\n    }, {\n      date: '1981-08-12',\n      title: 'IBM PC 发布',\n      detail: 'IBM 5150 机型问世，搭载 Intel 8088 CPU 和 MS-DOS。'\n    }, {\n      date: '1982-02-16',\n      title: 'Compaq 创立',\n      detail: '康柏公司成立，专注于生产 IBM PC 兼容机。'\n    }, {\n      date: '1983-05-30',\n      title: 'Apple Lisa 推出',\n      detail: 'Apple 发布 Apple Lisa，标志着图形用户界面的发展。'\n    }]\n  }, {\n    title: '互联网',\n    period: '(1994-2000)',\n    events: [{\n      date: '1994-04-04',\n      title: 'Netscape 创立',\n      detail: 'Mosaic 团队成员创立 Netscape，专注浏览器研发。'\n    }, {\n      date: '1995-07-05',\n      title: 'Amazon 上线',\n      detail: '杰夫·贝索斯创立的电商网站 Amazon.com 开始运营。'\n    }, {\n      date: '1996-07-04',\n      title: 'Hotmail 推出',\n      detail: '免费网络邮件服务 Hotmail 上线，迅速风靡全球。'\n    }, {\n      date: '1997-03-02',\n      title: 'AOL 收购 CompuServe',\n      detail: 'AOL 以 1.2 亿美元收购 CompuServe 网络业务。'\n    }, {\n      date: '1999-01-15',\n      title: 'Google 搜索上线',\n      detail: 'Google 推出搜索引擎，革新了互联网信息检索方式。'\n    }, {\n      date: '2000-06-26',\n      title: 'Dot-com 泡沫顶峰',\n      detail: '互联网公司大量上市，市场繁荣到达顶峰。'\n    }]\n  }, {\n    title: '智能手机',\n    period: '(2007-2012)',\n    events: [{\n      date: '2007-01-09',\n      title: 'iPhone 发布',\n      detail: '苹果首款 iPhone 在 Macworld 大会上正式发布。'\n    }, {\n      date: '2007-06-29',\n      title: 'iPhone 开售',\n      detail: '初代 iPhone 在美国上市，引发消费者排队抢购。'\n    }, {\n      date: '2008-09-23',\n      title: 'Android 1.0 发布',\n      detail: '搭载 Android 系统的 HTC Dream 上市。'\n    }, {\n      date: '2009-03-17',\n      title: 'iPhone OS 3.0 公布',\n      detail: '苹果发布 iPhone OS 3.0，新增推送通知等功能。'\n    }, {\n      date: '2010-10-04',\n      title: 'Samsung Galaxy S 系列',\n      detail: '三星发布 Galaxy S 系列，标志着安卓阵营的崛起。'\n    }, {\n      date: '2012-09-05',\n      title: 'iPhone 5 发布',\n      detail: '苹果发布 iPhone 5，采用全新设计和更快的处理器。'\n    }]\n  }, {\n    title: '电动车',\n    period: '(2015-2020)',\n    events: [{\n      date: '2015-01-12',\n      title: 'Chevrolet Bolt 概念车',\n      detail: '通用在北美车展发布 Bolt EV 概念车，主打平价长续航。'\n    }, {\n      date: '2016-03-31',\n      title: 'Tesla Model 3 亮相',\n      detail: '特斯拉举行 Model 3 发布会，引发大量预订。'\n    }, {\n      date: '2017-07-28',\n      title: 'Model 3 首批交付',\n      detail: '特斯拉向首批用户交付 Model 3 量产车。'\n    }, {\n      date: '2018-09-25',\n      title: 'NIO ES8 发布',\n      detail: '蔚来发布高端电动 SUV，推动国产电动车市场。'\n    }, {\n      date: '2020-01-15',\n      title: 'Tesla Model Y 推出',\n      detail: '特斯拉推出更紧凑的 Model Y，进一步拓展电动车市场。'\n    }]\n  }, {\n    title: '生成式 AI',\n    period: '(2019-2023)',\n    events: [{\n      date: '2019-02-14',\n      title: 'OpenAI GPT-2 公布',\n      detail: 'OpenAI 宣布 GPT-2 模型，但仅限“受限发布”。'\n    }, {\n      date: '2020-05-28',\n      title: 'GPT-3 论文发表',\n      detail: '“Language Models are Few-Shot Learners” 论文上载至 arXiv。'\n    }, {\n      date: '2021-08-10',\n      title: 'DALL·E 展示',\n      detail: 'OpenAI 展示 DALL·E，展示了 AI 生成图像的能力。'\n    }, {\n      date: '2022-03-15',\n      title: 'GPT-3.5 发布',\n      detail: 'OpenAI 发布 GPT-3.5 text-davinci-002 API。'\n    }, {\n      date: '2022-11-30',\n      title: 'ChatGPT 上线',\n      detail: 'OpenAI 推出对话式 AI ChatGPT，用户量激增。'\n    }, {\n      date: '2023-06-12',\n      title: '生成式 AI 全面爆发',\n      detail: '各大科技公司纷纷推出生成式 AI 应用，加速产业变革。'\n    }]\n  }];\n\n  // 用于存储各事件的位置信息（键为 eventId，值为 { x, y }）\n  const [eventPositions, setEventPositions] = useState({});\n  const registerPosition = (id, pos) => {\n    setEventPositions(prev => ({\n      ...prev,\n      [id]: pos\n    }));\n  };\n\n  // 将连接关系存入状态中，便于动态添加手动连接\n  const [connections, setConnections] = useState([{\n    from: '0-2',\n    to: '1-0',\n    reason: '推动网络化办公'\n  }, {\n    from: '0-4',\n    to: '1-4',\n    reason: '用户体验革新'\n  }, {\n    from: '1-5',\n    to: '2-5',\n    reason: '信息获取方式转变'\n  }, {\n    from: '1-3',\n    to: '2-2',\n    reason: '技术互补'\n  }, {\n    from: '2-4',\n    to: '3-4',\n    reason: '智能化互联'\n  }, {\n    from: '1-4',\n    to: '4-0',\n    reason: '大数据启发'\n  }, {\n    from: '2-5',\n    to: '4-5',\n    reason: '移动端需求激增'\n  }, {\n    from: '3-3',\n    to: '4-2',\n    reason: '智能驾驶发展'\n  },\n  // 新增的红色连接\n  {\n    from: '0-1',\n    to: '1-1',\n    reason: '初期网络试验'\n  }, {\n    from: '1-2',\n    to: '2-3',\n    reason: '手机技术推动'\n  }, {\n    from: '3-1',\n    to: '4-3',\n    reason: '智能变革'\n  }]);\n\n  // 用于存储用户手动选择的事件（最多保存一个待选事件）\n  const [selectedEvents, setSelectedEvents] = useState([]);\n\n  // 处理事件点击，支持手动连接两个事件\n  const handleEventClick = eventId => {\n    if (selectedEvents.length === 0) {\n      setSelectedEvents([eventId]);\n    } else if (selectedEvents.length === 1) {\n      // 若重复点击同一事件则清空选择\n      if (selectedEvents[0] === eventId) {\n        setSelectedEvents([]);\n        return;\n      }\n      // 生成手动连接：可弹窗让用户输入连接理由\n      const reason = window.prompt(\"请输入连接理由\", \"手动连接\") || \"手动连接\";\n      const newConnection = {\n        from: selectedEvents[0],\n        to: eventId,\n        reason\n      };\n      setConnections(prev => [...prev, newConnection]);\n      setSelectedEvents([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"How to do the right things in tech wave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        flexWrap: 'wrap',\n        marginTop: '40px'\n      },\n      children: waves.map((wave, index) => /*#__PURE__*/_jsxDEV(Timeline, {\n        wave: wave,\n        waveIndex: index,\n        registerPosition: registerPosition,\n        onEventClick: handleEventClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConnectionsLayer, {\n      connections: connections,\n      eventPositions: eventPositions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n}\n_s2(Showcase, \"X7xDwg31xNi1Yumg3WNuivO+wqw=\");\n_c4 = Showcase;\nexport default Showcase;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"EventItem\");\n$RefreshReg$(_c2, \"Timeline\");\n$RefreshReg$(_c3, \"ConnectionsLayer\");\n$RefreshReg$(_c4, \"Showcase\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","EventItem","event","eventId","registerPosition","onEventClick","_s","itemRef","hover","setHover","tooltipStyle","position","top","left","transform","padding","backgroundColor","border","borderRadius","whiteSpace","zIndex","boxShadow","minWidth","current","rect","getBoundingClientRect","pos","x","y","height","ref","style","marginBottom","cursor","onMouseEnter","onMouseLeave","onClick","children","width","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","background","fontSize","textAlign","date","color","title","display","detail","_c","Timeline","wave","waveIndex","timelineHeight","timestamps","events","map","e","Date","getTime","earliestTime","Math","min","latestTime","max","totalTimeSpan","safeTimeSpan","flex","margin","period","right","index","currentTime","offset","ratio","_c2","ConnectionsLayer","connections","eventPositions","pointerEvents","conn","fromPos","from","toPos","to","midX","midY","x1","y1","x2","y2","stroke","strokeWidth","fill","textAnchor","reason","_c3","Showcase","_s2","waves","setEventPositions","id","prev","setConnections","selectedEvents","setSelectedEvents","handleEventClick","length","window","prompt","newConnection","justifyContent","flexWrap","marginTop","_c4","$RefreshReg$"],"sources":["/Users/jasonding/Desktop/Robot2025/src/components/Showcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n/**\n * 单个事件节点组件\n * 添加了 ref 用于获取 DOM 节点的位置信息，同时新增 onClick 事件用于手动连接事件\n */\nfunction EventItem({ event, eventId, registerPosition, onEventClick }) {\n  const itemRef = useRef(null);\n  const [hover, setHover] = useState(false);\n\n  // 悬浮提示（Hover Tooltip）的样式\n  const tooltipStyle = {\n    position: 'absolute',\n    top: '-60px',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    padding: '8px 12px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    whiteSpace: 'nowrap',\n    zIndex: 10,\n    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n    minWidth: '220px',\n  };\n\n  useEffect(() => {\n    if (itemRef.current) {\n      const rect = itemRef.current.getBoundingClientRect();\n      // 假设圆点在节点左侧，取圆点中心位置\n      const pos = { x: rect.left, y: rect.top + rect.height / 2 };\n      registerPosition(eventId, pos);\n    }\n  }, [itemRef.current, registerPosition, eventId]);\n\n  return (\n    <div\n      ref={itemRef}\n      style={{\n        position: 'relative',\n        marginBottom: '20px',\n        cursor: 'pointer',\n      }}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      onClick={() => onEventClick && onEventClick(eventId)}\n    >\n      {/* 时间线左侧的蓝色圆点 */}\n      <div\n        style={{\n          position: 'absolute',\n          top: '0',\n          width: '16px',\n          height: '16px',\n          borderRadius: '50%',\n          backgroundColor: '#007BFF',\n        }}\n      />\n\n      {/* 日期与标题部分 */}\n      <div style={{ marginLeft: '24px' }}>\n        <div\n          style={{\n            border: '2px solid #ddd',\n            borderRadius: '20px',\n            padding: '8px 14px',\n            background: '#fff',\n            fontSize: '15px',\n            minWidth: '120px',\n            textAlign: 'center',\n            marginBottom: '4px',\n          }}\n        >\n          {event.date}\n        </div>\n        <div style={{ fontSize: '14px', color: '#333', textAlign: 'center' }}>\n          <strong>{event.title}</strong>\n        </div>\n      </div>\n\n      {hover && (\n        <div style={tooltipStyle}>\n          <strong style={{ display: 'block', marginBottom: '6px' }}>\n            {event.title}\n          </strong>\n          <div style={{ fontSize: '13px', color: '#333' }}>{event.detail}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * 单条浪潮的时间线组件\n * 添加 eventId 用于区分各个事件，同时传入 onEventClick 处理手动连接事件\n */\nfunction Timeline({ wave, waveIndex, registerPosition, onEventClick }) {\n  // 延长时间线20%：之前为480，现在变为480*1.2 = 576\n  const timelineHeight = 576;\n  const timestamps = wave.events.map(e => new Date(e.date).getTime());\n  const earliestTime = Math.min(...timestamps);\n  const latestTime = Math.max(...timestamps);\n  const totalTimeSpan = latestTime - earliestTime;\n  const safeTimeSpan = totalTimeSpan === 0 ? 1 : totalTimeSpan;\n\n  return (\n    <div style={{ flex: '1', margin: '0 20px', position: 'relative' }}>\n      <h2 style={{ fontSize: '16px', marginBottom: '5px', textAlign: 'center' }}>\n        {wave.title}\n      </h2>\n      <div style={{ fontSize: '14px', color: '#666', marginBottom: '20px', textAlign: 'center' }}>\n        {wave.period}\n      </div>\n\n      <div\n        style={{\n          position: 'relative',\n          width: '2px',\n          backgroundColor: '#bbb',\n          height: timelineHeight + 'px',\n          marginLeft: '0',\n        }}\n      >\n        <div style={{ position: 'absolute', top: '0', left: '-10px', right: '-10px' }}>\n          {wave.events.map((event, index) => {\n            const currentTime = new Date(event.date).getTime();\n            const offset = currentTime - earliestTime;\n            const ratio = offset / safeTimeSpan;\n            const pos = ratio * timelineHeight;\n            const eventId = `${waveIndex}-${index}`;\n            return (\n              <div\n                key={index}\n                style={{\n                  position: 'absolute',\n                  top: pos + 'px',\n                  width: '220px',\n                }}\n              >\n                <EventItem\n                  event={event}\n                  eventId={eventId}\n                  registerPosition={registerPosition}\n                  onEventClick={onEventClick}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * 用于绘制连接线的组件，使用 SVG 实现\n */\nfunction ConnectionsLayer({ connections, eventPositions }) {\n  return (\n    <svg style={{ position: 'absolute', top: 0, left: 0, pointerEvents: 'none', width: '100%', height: '100%' }}>\n      {connections.map((conn, index) => {\n        const fromPos = eventPositions[conn.from];\n        const toPos = eventPositions[conn.to];\n        if (!fromPos || !toPos) return null;\n        const midX = (fromPos.x + toPos.x) / 2;\n        const midY = (fromPos.y + toPos.y) / 2;\n        return (\n          <g key={index}>\n            <line\n              x1={fromPos.x}\n              y1={fromPos.y}\n              x2={toPos.x}\n              y2={toPos.y}\n              stroke=\"#f00\"\n              strokeWidth=\"2\"\n            />\n            <text x={midX} y={midY - 5} fill=\"#f00\" fontSize=\"12\" textAnchor=\"middle\">\n              {conn.reason}\n            </text>\n          </g>\n        );\n      })}\n    </svg>\n  );\n}\n\n/**\n * 主容器组件：包含多个浪潮的时间线和连接线\n * 增加了手动连接功能：用户点击两个事件后会弹窗输入连接理由，然后添加连接\n */\nfunction Showcase() {\n  // 扩展后的示例数据：每个浪潮中增加了更多的事件\n  const waves = [\n    {\n      title: '个人电脑',\n      period: '(1979-1983)',\n      events: [\n        {\n          date: '1979-08-12',\n          title: 'VisiCalc 发布',\n          detail: '首款电子表格软件 VisiCalc 面向 Apple II 推出。',\n        },\n        {\n          date: '1980-08-25',\n          title: 'IBM PC 立项',\n          detail: 'IBM 决定组建个人电脑部门，启动“Project Chess”。',\n        },\n        {\n          date: '1981-08-12',\n          title: 'IBM PC 发布',\n          detail: 'IBM 5150 机型问世，搭载 Intel 8088 CPU 和 MS-DOS。',\n        },\n        {\n          date: '1982-02-16',\n          title: 'Compaq 创立',\n          detail: '康柏公司成立，专注于生产 IBM PC 兼容机。',\n        },\n        {\n          date: '1983-05-30',\n          title: 'Apple Lisa 推出',\n          detail: 'Apple 发布 Apple Lisa，标志着图形用户界面的发展。',\n        },\n      ],\n    },\n    {\n      title: '互联网',\n      period: '(1994-2000)',\n      events: [\n        {\n          date: '1994-04-04',\n          title: 'Netscape 创立',\n          detail: 'Mosaic 团队成员创立 Netscape，专注浏览器研发。',\n        },\n        {\n          date: '1995-07-05',\n          title: 'Amazon 上线',\n          detail: '杰夫·贝索斯创立的电商网站 Amazon.com 开始运营。',\n        },\n        {\n          date: '1996-07-04',\n          title: 'Hotmail 推出',\n          detail: '免费网络邮件服务 Hotmail 上线，迅速风靡全球。',\n        },\n        {\n          date: '1997-03-02',\n          title: 'AOL 收购 CompuServe',\n          detail: 'AOL 以 1.2 亿美元收购 CompuServe 网络业务。',\n        },\n        {\n          date: '1999-01-15',\n          title: 'Google 搜索上线',\n          detail: 'Google 推出搜索引擎，革新了互联网信息检索方式。',\n        },\n        {\n          date: '2000-06-26',\n          title: 'Dot-com 泡沫顶峰',\n          detail: '互联网公司大量上市，市场繁荣到达顶峰。',\n        },\n      ],\n    },\n    {\n      title: '智能手机',\n      period: '(2007-2012)',\n      events: [\n        {\n          date: '2007-01-09',\n          title: 'iPhone 发布',\n          detail: '苹果首款 iPhone 在 Macworld 大会上正式发布。',\n        },\n        {\n          date: '2007-06-29',\n          title: 'iPhone 开售',\n          detail: '初代 iPhone 在美国上市，引发消费者排队抢购。',\n        },\n        {\n          date: '2008-09-23',\n          title: 'Android 1.0 发布',\n          detail: '搭载 Android 系统的 HTC Dream 上市。',\n        },\n        {\n          date: '2009-03-17',\n          title: 'iPhone OS 3.0 公布',\n          detail: '苹果发布 iPhone OS 3.0，新增推送通知等功能。',\n        },\n        {\n          date: '2010-10-04',\n          title: 'Samsung Galaxy S 系列',\n          detail: '三星发布 Galaxy S 系列，标志着安卓阵营的崛起。',\n        },\n        {\n          date: '2012-09-05',\n          title: 'iPhone 5 发布',\n          detail: '苹果发布 iPhone 5，采用全新设计和更快的处理器。',\n        },\n      ],\n    },\n    {\n      title: '电动车',\n      period: '(2015-2020)',\n      events: [\n        {\n          date: '2015-01-12',\n          title: 'Chevrolet Bolt 概念车',\n          detail: '通用在北美车展发布 Bolt EV 概念车，主打平价长续航。',\n        },\n        {\n          date: '2016-03-31',\n          title: 'Tesla Model 3 亮相',\n          detail: '特斯拉举行 Model 3 发布会，引发大量预订。',\n        },\n        {\n          date: '2017-07-28',\n          title: 'Model 3 首批交付',\n          detail: '特斯拉向首批用户交付 Model 3 量产车。',\n        },\n        {\n          date: '2018-09-25',\n          title: 'NIO ES8 发布',\n          detail: '蔚来发布高端电动 SUV，推动国产电动车市场。',\n        },\n        {\n          date: '2020-01-15',\n          title: 'Tesla Model Y 推出',\n          detail: '特斯拉推出更紧凑的 Model Y，进一步拓展电动车市场。',\n        },\n      ],\n    },\n    {\n      title: '生成式 AI',\n      period: '(2019-2023)',\n      events: [\n        {\n          date: '2019-02-14',\n          title: 'OpenAI GPT-2 公布',\n          detail: 'OpenAI 宣布 GPT-2 模型，但仅限“受限发布”。',\n        },\n        {\n          date: '2020-05-28',\n          title: 'GPT-3 论文发表',\n          detail: '“Language Models are Few-Shot Learners” 论文上载至 arXiv。',\n        },\n        {\n          date: '2021-08-10',\n          title: 'DALL·E 展示',\n          detail: 'OpenAI 展示 DALL·E，展示了 AI 生成图像的能力。',\n        },\n        {\n          date: '2022-03-15',\n          title: 'GPT-3.5 发布',\n          detail: 'OpenAI 发布 GPT-3.5 text-davinci-002 API。',\n        },\n        {\n          date: '2022-11-30',\n          title: 'ChatGPT 上线',\n          detail: 'OpenAI 推出对话式 AI ChatGPT，用户量激增。',\n        },\n        {\n          date: '2023-06-12',\n          title: '生成式 AI 全面爆发',\n          detail: '各大科技公司纷纷推出生成式 AI 应用，加速产业变革。',\n        },\n      ],\n    },\n  ];\n\n  // 用于存储各事件的位置信息（键为 eventId，值为 { x, y }）\n  const [eventPositions, setEventPositions] = useState({});\n  const registerPosition = (id, pos) => {\n    setEventPositions(prev => ({ ...prev, [id]: pos }));\n  };\n\n  // 将连接关系存入状态中，便于动态添加手动连接\n  const [connections, setConnections] = useState([\n    { from: '0-2', to: '1-0', reason: '推动网络化办公' },\n    { from: '0-4', to: '1-4', reason: '用户体验革新' },\n    { from: '1-5', to: '2-5', reason: '信息获取方式转变' },\n    { from: '1-3', to: '2-2', reason: '技术互补' },\n    { from: '2-4', to: '3-4', reason: '智能化互联' },\n    { from: '1-4', to: '4-0', reason: '大数据启发' },\n    { from: '2-5', to: '4-5', reason: '移动端需求激增' },\n    { from: '3-3', to: '4-2', reason: '智能驾驶发展' },\n    // 新增的红色连接\n    { from: '0-1', to: '1-1', reason: '初期网络试验' },\n    { from: '1-2', to: '2-3', reason: '手机技术推动' },\n    { from: '3-1', to: '4-3', reason: '智能变革' },\n  ]);\n\n  // 用于存储用户手动选择的事件（最多保存一个待选事件）\n  const [selectedEvents, setSelectedEvents] = useState([]);\n\n  // 处理事件点击，支持手动连接两个事件\n  const handleEventClick = (eventId) => {\n    if (selectedEvents.length === 0) {\n      setSelectedEvents([eventId]);\n    } else if (selectedEvents.length === 1) {\n      // 若重复点击同一事件则清空选择\n      if (selectedEvents[0] === eventId) {\n        setSelectedEvents([]);\n        return;\n      }\n      // 生成手动连接：可弹窗让用户输入连接理由\n      const reason = window.prompt(\"请输入连接理由\", \"手动连接\") || \"手动连接\";\n      const newConnection = { from: selectedEvents[0], to: eventId, reason };\n      setConnections(prev => [...prev, newConnection]);\n      setSelectedEvents([]);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', position: 'relative' }}>\n      <h1 style={{ textAlign: 'center' }}>How to do the right things in tech wave</h1>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          marginTop: '40px',\n        }}\n      >\n        {waves.map((wave, index) => (\n          <Timeline\n            key={index}\n            wave={wave}\n            waveIndex={index}\n            registerPosition={registerPosition}\n            onEventClick={handleEventClick}\n          />\n        ))}\n      </div>\n      {/* 根据事件位置信息绘制所有连接线 */}\n      <ConnectionsLayer connections={connections} eventPositions={eventPositions} />\n    </div>\n  );\n}\n\nexport default Showcase;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}